一、事件监听三种方式
    1.匿名内部类
            clickButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    System.out.println("button被点击");
                }
            });
            2.自定义外部类继承OnClickListener类的onClick方法
        clickButton.setOnClickListener(new MyOnClickListener() {
            @Override
            public void onClick(View v) {
                super.onClick(v);
                Toast.makeText(MainActivity.this, "按钮被点击", Toast.LENGTH_LONG).show();
            }
        });
        class MyOnClickListener implements View.OnClickListener {

            @Override
            public void onClick(View v) {
                v.setAlpha(0.5f);
            }
        }
        3.接口方式监听按钮点击事件
二、TextView跑马灯
    <com.example.button.MarqueeText
        android:id="@+id/text1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/text_name"
        android:textSize="30sp"
        android:focusable="true"
        android:focusableInTouchMode="true"
        android:ellipsize="marquee"
        android:singleLine="true"/>
        创建类继承TextView构造方法以及重载isFocused方法
        public class MarqueeText extends TextView{
            public MarqueeText(Context context) {
                super(context);
            }

            public MarqueeText(Context context, AttributeSet attrs, int defStyleAttr) {
                super(context, attrs, defStyleAttr);
            }

            public MarqueeText(Context context, AttributeSet attrs) {
                super(context, attrs);
            }

            @Override
            public boolean isFocused() {
                return true;
            }  //所有的isFocused返回值都是true才能实现多行跑马灯
        }
三、AutoCompleteTextView 动态匹配输入内容
    android:completionThreshold="2"      设置输入多少字符自动匹配
    设置步骤：1.初始化控件
              2.创建数组适配器成放数组
              ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, Input);
              3.初始化数据源匹配输入框中内容
              4.将adapter适配器与AutoCompleteTextView绑定
              AutoComplete.setAdapter(adapter);
    MultiAutoCompleteTextView多次输入匹配，区别是mtxt.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());设置分隔符
四、ToggleButton 不同状态显示不同文字
      1.ToggleButton的配置
                    <ToggleButton
                        android:id="@+id/Togglebtn"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:textOff="picture1"
                        android:textOn="picture2"
                        />
      2.ToggleButton的监听
                    Togbtn.setOnCheckedChangeListener(this);
                    public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                           ImgView.setBackgroundResource(b ? R.drawable.picture1 : R.drawable.picture2);
                    }
五、安卓五大布局（布局中可以套用布局）
      1.LinearLayout线性布局
      android:orientation = "vertical" ----该属性决定他子类控件的排布方式（vertical垂直排布，horizontal水平排布）
      android:gravity = "center" ---- 该属性决定他子类的xy位置
      center_vertical:垂直居中
      center_horizontal:水平居中
      center:水平垂直都居中
      right\left\bottom:子类控件位于当前布局的右边\左边\下面
      子类控件在LinearLayout中常用的属性
      android:layout_gravity = "bottom" ----指本身在当前父容器的XY的一个位置
      android:layout_weight = "1" ----指本身控件占当前父容器的一个比例
      2.RelativeLayout相对布局
      子类控件相对父类容器
              android:layout_alignparentLeft,
              android:layout_alignparentTop,
              android:layout_marginLeft,
              android:layout_marginTop,
              android:layout_centerInparent,
              android:layout_centerHorizontal,
              android:layout_centerVertical
      子类控件相对子类控件
              android:layout_below
              android:layout_toRightOf
              android:layout_above
              android:layout_toLeftOf
              android:layout_alignBaseline
      在一条线上
              android:layout_alignBottom
              android:layout_alignLeft
              android:layout_alignRight
              android:layout_alignTop
      3.FrameLayout帧布局
      4.AbsoluteLayout绝对布局（也叫坐标布局，可以直接指定子元素的绝对位置位置(x,y)）
              在屏幕的适配上有缺陷
              android:layout_x="35dip"
      5.TableLayout表格布局
              android:collaseColumns="1,2"隐藏第多少列，用逗号隔开
              android:layout_column="1"该控件显示在第二列
              android:layout_san="2"该控件占据2列
六、安卓四大组件
      -- Activity
      -- Service
      -- BroadcastReceiver
      -- Content Provider
      1.Activity如何创建使用
          继承Android的Activity类
          重写方法
          设置显示布局
          在AndroidManifest文件中，注册Activity
      2.Activity生命周期
        onCreate() -> onStart() -> onResume() -> Activity running -> onpause() -> onStop -> onDestroy -> Activity Shutdown
      3.Activity四种状态
        -- 活动状态（Active/Running）Activity处于界面最顶端，获取焦点
        -- 暂停状态 (Paused)Activity失去焦点，但对用户可见
        -- 停止状态（Stopped）Activity被完全遮挡，但保留所有状态和成员信息
        -- 非活动状态（killed）Activity被停止
六、Intent实现页面跳转
      1.startActivity(intent)直接跳转
      2.startActivityForResult(intent,requestCode);
        onActivityResult(int requestCode,int resultCode,Intent data);
        requestCode 接收页面的标志，data 数据存储，resultCode返回页面的标志
        setResult(resultCode,data);
七、AndroidManifest.xml
      1.全局篇（包名、版本信息）

      2.组件篇（四大组件）
      图标:android:icon
      标题:android:lable
      主题样式:android:theme
      Activity(活动)
      <activity
          android:name=
          android:lable=
          <intent-filter>
          </intent-filter>
          </activity>
      启动一个没有在清单中定义的Activity会抛出异常
      Service(服务) ----后台逻辑代码处理
      Content Provider(内容提供者) ----内容提供者是用来管理数据库访问以及程序内和程序建共享的
      Broadcast Receiver(广播接收者) ----全局事件监听器
      3.权限篇（申请权限和定义权限）
七、1.数据适配器
      作用：把复杂的数据（数组、链表、数据库、集合等）填充在指定视图界面上
      ArrayAdapter(数组适配器)：用于绑定格式单一的数据
          数据源：可以是集合或数组
      SimpleAdapter(简单适配器)：用于绑定格式复杂的数据
          数据源：只能是特定泛型的集合
          simpleAdapter = new SimpleAdapter(Context,data,resource,from,to);
          context:上下文
          data:数据源(List<? extends Map<String,?>>data)一个Map所组成的List集合
               每一个Map都会对应ListView列表中的一行，每一个Map中的键都必须去包含所有在from中所指定的键
          resource:列表项中的布局文件ID
          from:Map中的键名
          to:绑定数据视图中的ID,与from形成对应关系
        数据适配器是连接数据源和视图界面的桥梁
        实现过程：新建适配器->添加数据源到适配器->视图加载适配器
     2.监听器
      OnItemClickListener:可以处理视图中单个条目的点击事件

      OnScrollListener:监测滚动的变化，可以用于视图在滚动中的加载数据
      监听器是程序和用户交互的桥梁(通过接口实现)
      notifyDataSetChanged()适配器数据刷新，能够动态更新视图中所包含的数据，如下滑加载
      3.DataPicker&&TimePicker动态输入时间和日期的功能
        DataPickerDialog&&TimePickerDialog动态输入时间和日期对话框
        OnDataChangedListener和OnTimeChangedListener()针对监测日期时间改变的监听器
        OnDataSetListener&&OnTimeSetListener()
八、GridView
      数据源(集合)->适配器(SimpleAdapter)->视图界面(GridView)
      点击单个视图目标时的响应方法->OnItemClickListener
      1.准备数据源
      2.新建适配器(SimpleAdapter)
      3.GridView加载适配器
      4.GridView配置事件监听器(OnItemClickListener)
九、ProgressBar(进度条)
style="@android:style/Widget.ProgressBar.Horizontal"
自定义修改github样式
十、WebView
    1.通过Intent调用系统浏览器
      Uri uri = Uri.parse(url); //
      Intent intent = new Intent(Intent.ACTION_VIEW,uri);
      startActivity(intent);
      2.WebView使用方法
        1.将WebView加入你的应用
        2.使用WebView加载页面
              loadUrl("http://www.baidu.com");加载web资源
              loadUrl("file:///android_assets/XX.html");加载本地资源
              本地文件存放在：assets文件中
              使页面获得焦点 webView.requestFocus();
        3.获取网络访问权限
        <manifest...>
        <uses-permisson android:name="android.permission.INTERNET"/
        >
        </manifest>
        4.在WebView中使用Javascript
        WebSettings webSettings = webView.getSettings();
        webSettings.setJavaScriptEnable(true);
        5.处理页面导航
        webView.setWebViewClient(new WebViewClient());
        6.后退与前进
        goBack(),goForward()
        7.判断页面加载过程
          webView.setWebChromeClient(new WebChromeClient())
        8.WebView缓存的运用
        webView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //优先使用缓存
        webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);   //不使用缓存
十一、Fragment
    静态加载
    动态加载
    生命周期
    相互通信
十二、Gallery
     1.添加图片资源数组（准备数据源）
     2.声明Gallery并初始化
     3.创建自定义适配器（准备适配器）
         继承BasaAdapter,并实现原有方法，写构造方法，注意传参
         getView方法中传递数组图像，加载View背景图像资源，设置Gallery大小
         设置缩放模式，返回ImageView
     4.Gallery加载适配器，实例化adapter
十三、安卓布局五大原则
     1.尽量多使用LinearLayout和RelativeLayout,不要使用AbsoluteLayout
     2.在布局层次一样的情况下建议使用LinearLayout代替RelativeLayout
     3.将可复用的组件抽取出来并通过include标签使用
          将共用的组件抽取出来单独放到一个xml文件中，然后使用include标签导入共用布局
          效果：提高UI的制作和复用效率，也能保证制作的UI布局更加工整和易维护
     4.使用ViewStub标签来加载一些不常用的布局
     5.使用merge标签减少布局的嵌套层次